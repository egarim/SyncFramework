using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace BIT.Data.Sync
{
    /// <summary>
    /// Defines the contract for a delta store, which provides methods for saving and retrieving deltas.
    /// </summary>
    public interface IDeltaStore
    {
        /// <summary>
        /// Saves a collection of deltas in the current store.
        /// </summary>
        /// <param name="deltas">The deltas to be saved.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>An empty task.</returns>
        Task SaveDeltasAsync(IEnumerable<IDelta> deltas, CancellationToken cancellationToken);
        /// <summary>
        /// Gets a collection of deltas generated by other nodes with indices greater than the start index.
        /// </summary>
        /// <param name="startIndex">The start index.</param>
        /// <param name="myIdentity">The identity of the current node.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>A collection of deltas generated by other nodes.</returns>
        Task<IEnumerable<IDelta>> GetDeltasFromOtherNodes(string startIndex, string myIdentity, CancellationToken cancellationToken);
        /// <summary>
        /// Gets all deltas in the store with an index greater than the start index.
        /// </summary>
        /// <param name="startIndex">The start index.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>A collection of deltas.</returns>
        Task<IEnumerable<IDelta>> GetDeltasAsync(string startIndex, CancellationToken cancellationToken);
        /// <summary>
        /// Gets all deltas in the store with an index greater than the start index and by identity.
        /// </summary>
        /// <param name="startIndex">The start index.</param>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>A collection of deltas.</returns>
        Task<IEnumerable<IDelta>> GetDeltasByIdentityAsync(string startIndex, string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Gets the count of deltas with indices greater than the start index.
        /// </summary>
        /// <param name="startIndex">The start index.</param>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>The count of deltas.</returns>
        Task<int> GetDeltaCountAsync(string startIndex, string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Checks if there is delta status exists.
        /// </summary>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>A boolean indicating whether a delta status exists.</returns>
        Task<bool> CanRestoreDatabaseAsync(string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Gets the index of the last delta processed by this data object.
        /// </summary>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>The index of the last delta processed by this data object.</returns>
        Task<string> GetLastProcessedDeltaAsync(string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Sets the index of the last delta processed by this data object.
        /// </summary>
        /// <param name="Index">The index to be saved.</param>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>An empty task.</returns>
        Task SetLastProcessedDeltaAsync(string Index, string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Gets the index of the last delta pushed to the server node.
        /// </summary>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>The index of the last delta pushed to the server node.</returns>
        Task<string> GetLastPushedDeltaAsync(string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Sets the index of the last delta pushed to the server node.
        /// </summary>
        /// <param name="Index">The index to be saved.</param>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>An empty task.</returns>
        Task SetLastPushedDeltaAsync(string Index, string identity, CancellationToken cancellationToken);
        /// <summary>
        /// Deletes all deltas in the store.
        /// </summary>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>An empty task.</returns>
        Task PurgeDeltasAsync(string identity, CancellationToken cancellationToken = default);
        /// <summary>
        /// Resets the status of all deltas in the store.
        /// </summary>
        /// <param name="identity">The identity of the deltas.</param>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>An empty task.</returns>
        Task ResetDeltasStatusAsync(string identity, CancellationToken cancellationToken = default);
        /// <summary>
        /// Gets the sequence service used by the delta store.
        /// </summary>
        ISequenceService SequenceService { get; }
    }
}